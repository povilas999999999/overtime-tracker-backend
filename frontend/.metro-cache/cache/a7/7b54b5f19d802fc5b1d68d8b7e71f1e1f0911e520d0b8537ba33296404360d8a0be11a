{"dependencies":[{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo=","exportNames":["*"],"imports":1}},{"name":"expo-modules-core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":76,"index":76}}],"key":"fU8WLIPqoAGygnPbZ/QJiQQfXEY=","exportNames":["*"],"imports":1}},{"name":"./ExpoTaskManager","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":77},"end":{"line":2,"column":48,"index":125}}],"key":"XuoplolDboh/CUTNxf5WfqS0FBQ=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  exports.defineTask = defineTask;\n  exports.isTaskDefined = isTaskDefined;\n  exports.isTaskRegisteredAsync = isTaskRegisteredAsync;\n  exports.getTaskOptionsAsync = getTaskOptionsAsync;\n  exports.getRegisteredTasksAsync = getRegisteredTasksAsync;\n  exports.unregisterTaskAsync = unregisterTaskAsync;\n  exports.unregisterAllTasksAsync = unregisterAllTasksAsync;\n  exports.isAvailableAsync = isAvailableAsync;\n  var _babelRuntimeHelpersAsyncToGenerator = require(_dependencyMap[0], \"@babel/runtime/helpers/asyncToGenerator\");\n  var _asyncToGenerator = _interopDefault(_babelRuntimeHelpersAsyncToGenerator);\n  var _expoModulesCore = require(_dependencyMap[1], \"expo-modules-core\");\n  var _ExpoTaskManager = require(_dependencyMap[2], \"./ExpoTaskManager\");\n  var ExpoTaskManager = _interopDefault(_ExpoTaskManager);\n  var tasks = new Map();\n  function _validate(taskName) {\n    if (!taskName || typeof taskName !== 'string') {\n      throw new TypeError('`taskName` must be a non-empty string.');\n    }\n  }\n  // @needsAudit\n  /**\n   * Defines task function. It must be called in the global scope of your JavaScript bundle.\n   * In particular, it cannot be called in any of React lifecycle methods like `componentDidMount`.\n   * This limitation is due to the fact that when the application is launched in the background,\n   * we need to spin up your JavaScript app, run your task and then shut down â€” no views are mounted\n   * in this scenario.\n   *\n   * @param taskName Name of the task. It must be the same as the name you provided when registering the task.\n   * @param taskExecutor A function that will be invoked when the task with given `taskName` is executed.\n   */\n  function defineTask(taskName, taskExecutor) {\n    if (!taskName || typeof taskName !== 'string') {\n      console.warn(`TaskManager.defineTask: 'taskName' argument must be a non-empty string.`);\n      return;\n    }\n    if (!taskExecutor || typeof taskExecutor !== 'function') {\n      console.warn(`TaskManager.defineTask: 'task' argument must be a function.`);\n      return;\n    }\n    tasks.set(taskName, taskExecutor);\n  }\n  // @needsAudit\n  /**\n   * Checks whether the task is already defined.\n   *\n   * @param taskName Name of the task.\n   */\n  function isTaskDefined(taskName) {\n    return tasks.has(taskName);\n  }\n  // @needsAudit\n  /**\n   * Determine whether the task is registered. Registered tasks are stored in a persistent storage and\n   * preserved between sessions.\n   *\n   * @param taskName Name of the task.\n   * @returns A promise which resolves to `true` if a task with the given name is registered, otherwise `false`.\n   */\n  function isTaskRegisteredAsync(_x) {\n    return _isTaskRegisteredAsync.apply(this, arguments);\n  } // @needsAudit\n  /**\n   * Retrieves `options` associated with the task, that were passed to the function registering the task\n   * (e.g. `Location.startLocationUpdatesAsync`).\n   *\n   * @param taskName Name of the task.\n   * @return A promise which fulfills with the `options` object that was passed while registering task\n   * with given name or `null` if task couldn't be found.\n   */\n  function _isTaskRegisteredAsync() {\n    _isTaskRegisteredAsync = (0, _asyncToGenerator.default)(function* (taskName) {\n      if (!ExpoTaskManager.default.isTaskRegisteredAsync) {\n        throw new _expoModulesCore.UnavailabilityError('TaskManager', 'isTaskRegisteredAsync');\n      }\n      _validate(taskName);\n      return ExpoTaskManager.default.isTaskRegisteredAsync(taskName);\n    });\n    return _isTaskRegisteredAsync.apply(this, arguments);\n  }\n  function getTaskOptionsAsync(_x2) {\n    return _getTaskOptionsAsync.apply(this, arguments);\n  } // @needsAudit\n  /**\n   * Provides information about tasks registered in the app.\n   *\n   * @returns A promise which fulfills with an array of tasks registered in the app.\n   * @example\n   * ```js\n   * [\n   *   {\n   *     taskName: 'location-updates-task-name',\n   *     taskType: 'location',\n   *     options: {\n   *       accuracy: Location.Accuracy.High,\n   *       showsBackgroundLocationIndicator: false,\n   *     },\n   *   },\n   *   {\n   *     taskName: 'geofencing-task-name',\n   *     taskType: 'geofencing',\n   *     options: {\n   *       regions: [...],\n   *     },\n   *   },\n   * ]\n   * ```\n   */\n  function _getTaskOptionsAsync() {\n    _getTaskOptionsAsync = (0, _asyncToGenerator.default)(function* (taskName) {\n      if (!ExpoTaskManager.default.getTaskOptionsAsync) {\n        throw new _expoModulesCore.UnavailabilityError('TaskManager', 'getTaskOptionsAsync');\n      }\n      _validate(taskName);\n      return ExpoTaskManager.default.getTaskOptionsAsync(taskName);\n    });\n    return _getTaskOptionsAsync.apply(this, arguments);\n  }\n  function getRegisteredTasksAsync() {\n    return _getRegisteredTasksAsync.apply(this, arguments);\n  } // @needsAudit\n  /**\n   * Unregisters task from the app, so the app will not be receiving updates for that task anymore.\n   * _It is recommended to use methods specialized by modules that registered the task, eg.\n   * [`Location.stopLocationUpdatesAsync`](./location/#expolocationstoplocationupdatesasynctaskname)._\n   *\n   * @param taskName Name of the task to unregister.\n   * @return A promise which fulfills as soon as the task is unregistered.\n   */\n  function _getRegisteredTasksAsync() {\n    _getRegisteredTasksAsync = (0, _asyncToGenerator.default)(function* () {\n      if (!ExpoTaskManager.default.getRegisteredTasksAsync) {\n        throw new _expoModulesCore.UnavailabilityError('TaskManager', 'getRegisteredTasksAsync');\n      }\n      return ExpoTaskManager.default.getRegisteredTasksAsync();\n    });\n    return _getRegisteredTasksAsync.apply(this, arguments);\n  }\n  function unregisterTaskAsync(_x3) {\n    return _unregisterTaskAsync.apply(this, arguments);\n  } // @needsAudit\n  /**\n   * Unregisters all tasks registered for the running app. You may want to call this when the user is\n   * signing out and you no longer need to track his location or run any other background tasks.\n   * @return A promise which fulfills as soon as all tasks are completely unregistered.\n   */\n  function _unregisterTaskAsync() {\n    _unregisterTaskAsync = (0, _asyncToGenerator.default)(function* (taskName) {\n      if (!ExpoTaskManager.default.unregisterTaskAsync) {\n        throw new _expoModulesCore.UnavailabilityError('TaskManager', 'unregisterTaskAsync');\n      }\n      _validate(taskName);\n      yield ExpoTaskManager.default.unregisterTaskAsync(taskName);\n    });\n    return _unregisterTaskAsync.apply(this, arguments);\n  }\n  function unregisterAllTasksAsync() {\n    return _unregisterAllTasksAsync.apply(this, arguments);\n  }\n  function _unregisterAllTasksAsync() {\n    _unregisterAllTasksAsync = (0, _asyncToGenerator.default)(function* () {\n      if (!ExpoTaskManager.default.unregisterAllTasksAsync) {\n        throw new _expoModulesCore.UnavailabilityError('TaskManager', 'unregisterAllTasksAsync');\n      }\n      yield ExpoTaskManager.default.unregisterAllTasksAsync();\n    });\n    return _unregisterAllTasksAsync.apply(this, arguments);\n  }\n  if (ExpoTaskManager.default) {\n    var eventEmitter = new _expoModulesCore.LegacyEventEmitter(ExpoTaskManager.default);\n    eventEmitter.addListener(ExpoTaskManager.default.EVENT_NAME, /*#__PURE__*/function () {\n      var _ref2 = (0, _asyncToGenerator.default)(function* (_ref) {\n        var data = _ref.data,\n          error = _ref.error,\n          executionInfo = _ref.executionInfo;\n        var eventId = executionInfo.eventId,\n          taskName = executionInfo.taskName;\n        var taskExecutor = tasks.get(taskName);\n        var result = null;\n        if (taskExecutor) {\n          try {\n            // Execute JS task\n            result = yield taskExecutor({\n              data,\n              error,\n              executionInfo\n            });\n          } catch (error) {\n            console.error(`TaskManager: Task \"${taskName}\" failed:`, error);\n          } finally {\n            // Notify manager the task is finished.\n            yield ExpoTaskManager.default.notifyTaskFinishedAsync(taskName, {\n              eventId,\n              result\n            });\n          }\n        } else {\n          console.warn(`TaskManager: Task \"${taskName}\" has been executed but looks like it is not defined. Make sure that \"TaskManager.defineTask\" is called during initialization phase.`);\n          // No tasks defined -> we need to notify about finish anyway.\n          yield ExpoTaskManager.default.notifyTaskFinishedAsync(taskName, {\n            eventId,\n            result\n          });\n          // We should also unregister such tasks automatically as the task might have been removed\n          // from the app or just renamed - in that case it needs to be registered again (with the new name).\n          yield ExpoTaskManager.default.unregisterTaskAsync(taskName);\n        }\n      });\n      return function (_x4) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  }\n  // @needsAudit\n  /**\n   * Determine if the `TaskManager` API can be used in this app.\n   * @return A promise which fulfills with `true` if the API can be used, and `false` otherwise.\n   * With Expo Go, `TaskManager` is not available on Android, and does not support background execution on iOS.\n   * Use a development build to avoid limitations: https://expo.fyi/dev-client.\n   * On the web, it always returns `false`.\n   */\n  function isAvailableAsync() {\n    return _isAvailableAsync.apply(this, arguments);\n  }\n  function _isAvailableAsync() {\n    _isAvailableAsync = (0, _asyncToGenerator.default)(function* () {\n      return ExpoTaskManager.default.isAvailableAsync();\n    });\n    return _isAvailableAsync.apply(this, arguments);\n  }\n});","lineCount":241,"map":[[12,2,20,0,"exports"],[12,9,20,0],[12,10,20,0,"defineTask"],[12,20,20,0],[12,23,20,0,"defineTask"],[12,33,20,0],[13,2,37,0,"exports"],[13,9,37,0],[13,10,37,0,"isTaskDefined"],[13,23,37,0],[13,26,37,0,"isTaskDefined"],[13,39,37,0],[14,2,48,0,"exports"],[14,9,48,0],[14,10,48,0,"isTaskRegisteredAsync"],[14,31,48,0],[14,34,48,0,"isTaskRegisteredAsync"],[14,55,48,0],[15,2,64,0,"exports"],[15,9,64,0],[15,10,64,0,"getTaskOptionsAsync"],[15,29,64,0],[15,32,64,0,"getTaskOptionsAsync"],[15,51,64,0],[16,2,97,0,"exports"],[16,9,97,0],[16,10,97,0,"getRegisteredTasksAsync"],[16,33,97,0],[16,36,97,0,"getRegisteredTasksAsync"],[16,59,97,0],[17,2,112,0,"exports"],[17,9,112,0],[17,10,112,0,"unregisterTaskAsync"],[17,29,112,0],[17,32,112,0,"unregisterTaskAsync"],[17,51,112,0],[18,2,125,0,"exports"],[18,9,125,0],[18,10,125,0,"unregisterAllTasksAsync"],[18,33,125,0],[18,36,125,0,"unregisterAllTasksAsync"],[18,59,125,0],[19,2,168,0,"exports"],[19,9,168,0],[19,10,168,0,"isAvailableAsync"],[19,26,168,0],[19,29,168,0,"isAvailableAsync"],[19,45,168,0],[20,2,170,1],[20,6,170,1,"_babelRuntimeHelpersAsyncToGenerator"],[20,42,170,1],[20,45,170,1,"require"],[20,52,170,1],[20,53,170,1,"_dependencyMap"],[20,67,170,1],[21,2,170,1],[21,6,170,1,"_asyncToGenerator"],[21,23,170,1],[21,26,170,1,"_interopDefault"],[21,41,170,1],[21,42,170,1,"_babelRuntimeHelpersAsyncToGenerator"],[21,78,170,1],[22,2,1,0],[22,6,1,0,"_expoModulesCore"],[22,22,1,0],[22,25,1,0,"require"],[22,32,1,0],[22,33,1,0,"_dependencyMap"],[22,47,1,0],[23,2,2,0],[23,6,2,0,"_ExpoTaskManager"],[23,22,2,0],[23,25,2,0,"require"],[23,32,2,0],[23,33,2,0,"_dependencyMap"],[23,47,2,0],[24,2,2,0],[24,6,2,0,"ExpoTaskManager"],[24,21,2,0],[24,24,2,0,"_interopDefault"],[24,39,2,0],[24,40,2,0,"_ExpoTaskManager"],[24,56,2,0],[25,2,3,0],[25,6,3,6,"tasks"],[25,11,3,11],[25,14,3,14],[25,18,3,18,"Map"],[25,21,3,21],[25,22,3,22],[25,23,3,23],[26,2,4,0],[26,11,4,9,"_validate"],[26,20,4,18,"_validate"],[26,21,4,19,"taskName"],[26,29,4,27],[26,31,4,29],[27,4,5,4],[27,8,5,8],[27,9,5,9,"taskName"],[27,17,5,17],[27,21,5,21],[27,28,5,28,"taskName"],[27,36,5,36],[27,41,5,41],[27,49,5,49],[27,51,5,51],[28,6,6,8],[28,12,6,14],[28,16,6,18,"TypeError"],[28,25,6,27],[28,26,6,28],[28,66,6,68],[28,67,6,69],[29,4,7,4],[30,2,8,0],[31,2,9,0],[32,2,10,0],[33,0,11,0],[34,0,12,0],[35,0,13,0],[36,0,14,0],[37,0,15,0],[38,0,16,0],[39,0,17,0],[40,0,18,0],[41,0,19,0],[42,2,20,7],[42,11,20,16,"defineTask"],[42,21,20,26,"defineTask"],[42,22,20,27,"taskName"],[42,30,20,35],[42,32,20,37,"taskExecutor"],[42,44,20,49],[42,46,20,51],[43,4,21,4],[43,8,21,8],[43,9,21,9,"taskName"],[43,17,21,17],[43,21,21,21],[43,28,21,28,"taskName"],[43,36,21,36],[43,41,21,41],[43,49,21,49],[43,51,21,51],[44,6,22,8,"console"],[44,13,22,15],[44,14,22,16,"warn"],[44,18,22,20],[44,19,22,21],[44,92,22,94],[44,93,22,95],[45,6,23,8],[46,4,24,4],[47,4,25,4],[47,8,25,8],[47,9,25,9,"taskExecutor"],[47,21,25,21],[47,25,25,25],[47,32,25,32,"taskExecutor"],[47,44,25,44],[47,49,25,49],[47,59,25,59],[47,61,25,61],[48,6,26,8,"console"],[48,13,26,15],[48,14,26,16,"warn"],[48,18,26,20],[48,19,26,21],[48,80,26,82],[48,81,26,83],[49,6,27,8],[50,4,28,4],[51,4,29,4,"tasks"],[51,9,29,9],[51,10,29,10,"set"],[51,13,29,13],[51,14,29,14,"taskName"],[51,22,29,22],[51,24,29,24,"taskExecutor"],[51,36,29,36],[51,37,29,37],[52,2,30,0],[53,2,31,0],[54,2,32,0],[55,0,33,0],[56,0,34,0],[57,0,35,0],[58,0,36,0],[59,2,37,7],[59,11,37,16,"isTaskDefined"],[59,24,37,29,"isTaskDefined"],[59,25,37,30,"taskName"],[59,33,37,38],[59,35,37,40],[60,4,38,4],[60,11,38,11,"tasks"],[60,16,38,16],[60,17,38,17,"has"],[60,20,38,20],[60,21,38,21,"taskName"],[60,29,38,29],[60,30,38,30],[61,2,39,0],[62,2,40,0],[63,2,41,0],[64,0,42,0],[65,0,43,0],[66,0,44,0],[67,0,45,0],[68,0,46,0],[69,0,47,0],[70,2,41,0],[70,11,48,22,"isTaskRegisteredAsync"],[70,32,48,43,"isTaskRegisteredAsync"],[70,33,48,43,"_x"],[70,35,48,43],[71,4,48,43],[71,11,48,43,"_isTaskRegisteredAsync"],[71,33,48,43],[71,34,48,43,"apply"],[71,39,48,43],[71,46,48,43,"arguments"],[71,55,48,43],[72,2,48,43],[72,4,55,0],[73,2,56,0],[74,0,57,0],[75,0,58,0],[76,0,59,0],[77,0,60,0],[78,0,61,0],[79,0,62,0],[80,0,63,0],[81,2,56,0],[81,11,56,0,"_isTaskRegisteredAsync"],[81,34,56,0],[82,4,56,0,"_isTaskRegisteredAsync"],[82,26,56,0],[82,33,56,0,"_asyncToGenerator"],[82,50,56,0],[82,51,56,0,"default"],[82,58,56,0],[82,60,48,7],[82,71,48,44,"taskName"],[82,79,48,52],[82,81,48,54],[83,6,49,4],[83,10,49,8],[83,11,49,9,"ExpoTaskManager"],[83,26,49,24],[83,27,49,24,"default"],[83,34,49,24],[83,35,49,25,"isTaskRegisteredAsync"],[83,56,49,46],[83,58,49,48],[84,8,50,8],[84,14,50,14],[84,18,50,18,"UnavailabilityError"],[84,34,50,37],[84,35,50,37,"UnavailabilityError"],[84,54,50,37],[84,55,50,38],[84,68,50,51],[84,70,50,53],[84,93,50,76],[84,94,50,77],[85,6,51,4],[86,6,52,4,"_validate"],[86,15,52,13],[86,16,52,14,"taskName"],[86,24,52,22],[86,25,52,23],[87,6,53,4],[87,13,53,11,"ExpoTaskManager"],[87,28,53,26],[87,29,53,26,"default"],[87,36,53,26],[87,37,53,27,"isTaskRegisteredAsync"],[87,58,53,48],[87,59,53,49,"taskName"],[87,67,53,57],[87,68,53,58],[88,4,54,0],[88,5,54,1],[89,4,54,1],[89,11,54,1,"_isTaskRegisteredAsync"],[89,33,54,1],[89,34,54,1,"apply"],[89,39,54,1],[89,46,54,1,"arguments"],[89,55,54,1],[90,2,54,1],[91,2,54,1],[91,11,64,22,"getTaskOptionsAsync"],[91,30,64,41,"getTaskOptionsAsync"],[91,31,64,41,"_x2"],[91,34,64,41],[92,4,64,41],[92,11,64,41,"_getTaskOptionsAsync"],[92,31,64,41],[92,32,64,41,"apply"],[92,37,64,41],[92,44,64,41,"arguments"],[92,53,64,41],[93,2,64,41],[93,4,71,0],[94,2,72,0],[95,0,73,0],[96,0,74,0],[97,0,75,0],[98,0,76,0],[99,0,77,0],[100,0,78,0],[101,0,79,0],[102,0,80,0],[103,0,81,0],[104,0,82,0],[105,0,83,0],[106,0,84,0],[107,0,85,0],[108,0,86,0],[109,0,87,0],[110,0,88,0],[111,0,89,0],[112,0,90,0],[113,0,91,0],[114,0,92,0],[115,0,93,0],[116,0,94,0],[117,0,95,0],[118,0,96,0],[119,2,72,0],[119,11,72,0,"_getTaskOptionsAsync"],[119,32,72,0],[120,4,72,0,"_getTaskOptionsAsync"],[120,24,72,0],[120,31,72,0,"_asyncToGenerator"],[120,48,72,0],[120,49,72,0,"default"],[120,56,72,0],[120,58,64,7],[120,69,64,42,"taskName"],[120,77,64,50],[120,79,64,52],[121,6,65,4],[121,10,65,8],[121,11,65,9,"ExpoTaskManager"],[121,26,65,24],[121,27,65,24,"default"],[121,34,65,24],[121,35,65,25,"getTaskOptionsAsync"],[121,54,65,44],[121,56,65,46],[122,8,66,8],[122,14,66,14],[122,18,66,18,"UnavailabilityError"],[122,34,66,37],[122,35,66,37,"UnavailabilityError"],[122,54,66,37],[122,55,66,38],[122,68,66,51],[122,70,66,53],[122,91,66,74],[122,92,66,75],[123,6,67,4],[124,6,68,4,"_validate"],[124,15,68,13],[124,16,68,14,"taskName"],[124,24,68,22],[124,25,68,23],[125,6,69,4],[125,13,69,11,"ExpoTaskManager"],[125,28,69,26],[125,29,69,26,"default"],[125,36,69,26],[125,37,69,27,"getTaskOptionsAsync"],[125,56,69,46],[125,57,69,47,"taskName"],[125,65,69,55],[125,66,69,56],[126,4,70,0],[126,5,70,1],[127,4,70,1],[127,11,70,1,"_getTaskOptionsAsync"],[127,31,70,1],[127,32,70,1,"apply"],[127,37,70,1],[127,44,70,1,"arguments"],[127,53,70,1],[128,2,70,1],[129,2,70,1],[129,11,97,22,"getRegisteredTasksAsync"],[129,34,97,45,"getRegisteredTasksAsync"],[129,35,97,45],[130,4,97,45],[130,11,97,45,"_getRegisteredTasksAsync"],[130,35,97,45],[130,36,97,45,"apply"],[130,41,97,45],[130,48,97,45,"arguments"],[130,57,97,45],[131,2,97,45],[131,4,103,0],[132,2,104,0],[133,0,105,0],[134,0,106,0],[135,0,107,0],[136,0,108,0],[137,0,109,0],[138,0,110,0],[139,0,111,0],[140,2,104,0],[140,11,104,0,"_getRegisteredTasksAsync"],[140,36,104,0],[141,4,104,0,"_getRegisteredTasksAsync"],[141,28,104,0],[141,35,104,0,"_asyncToGenerator"],[141,52,104,0],[141,53,104,0,"default"],[141,60,104,0],[141,62,97,7],[141,75,97,48],[142,6,98,4],[142,10,98,8],[142,11,98,9,"ExpoTaskManager"],[142,26,98,24],[142,27,98,24,"default"],[142,34,98,24],[142,35,98,25,"getRegisteredTasksAsync"],[142,58,98,48],[142,60,98,50],[143,8,99,8],[143,14,99,14],[143,18,99,18,"UnavailabilityError"],[143,34,99,37],[143,35,99,37,"UnavailabilityError"],[143,54,99,37],[143,55,99,38],[143,68,99,51],[143,70,99,53],[143,95,99,78],[143,96,99,79],[144,6,100,4],[145,6,101,4],[145,13,101,11,"ExpoTaskManager"],[145,28,101,26],[145,29,101,26,"default"],[145,36,101,26],[145,37,101,27,"getRegisteredTasksAsync"],[145,60,101,50],[145,61,101,51],[145,62,101,52],[146,4,102,0],[146,5,102,1],[147,4,102,1],[147,11,102,1,"_getRegisteredTasksAsync"],[147,35,102,1],[147,36,102,1,"apply"],[147,41,102,1],[147,48,102,1,"arguments"],[147,57,102,1],[148,2,102,1],[149,2,102,1],[149,11,112,22,"unregisterTaskAsync"],[149,30,112,41,"unregisterTaskAsync"],[149,31,112,41,"_x3"],[149,34,112,41],[150,4,112,41],[150,11,112,41,"_unregisterTaskAsync"],[150,31,112,41],[150,32,112,41,"apply"],[150,37,112,41],[150,44,112,41,"arguments"],[150,53,112,41],[151,2,112,41],[151,4,119,0],[152,2,120,0],[153,0,121,0],[154,0,122,0],[155,0,123,0],[156,0,124,0],[157,2,120,0],[157,11,120,0,"_unregisterTaskAsync"],[157,32,120,0],[158,4,120,0,"_unregisterTaskAsync"],[158,24,120,0],[158,31,120,0,"_asyncToGenerator"],[158,48,120,0],[158,49,120,0,"default"],[158,56,120,0],[158,58,112,7],[158,69,112,42,"taskName"],[158,77,112,50],[158,79,112,52],[159,6,113,4],[159,10,113,8],[159,11,113,9,"ExpoTaskManager"],[159,26,113,24],[159,27,113,24,"default"],[159,34,113,24],[159,35,113,25,"unregisterTaskAsync"],[159,54,113,44],[159,56,113,46],[160,8,114,8],[160,14,114,14],[160,18,114,18,"UnavailabilityError"],[160,34,114,37],[160,35,114,37,"UnavailabilityError"],[160,54,114,37],[160,55,114,38],[160,68,114,51],[160,70,114,53],[160,91,114,74],[160,92,114,75],[161,6,115,4],[162,6,116,4,"_validate"],[162,15,116,13],[162,16,116,14,"taskName"],[162,24,116,22],[162,25,116,23],[163,6,117,4],[163,12,117,10,"ExpoTaskManager"],[163,27,117,25],[163,28,117,25,"default"],[163,35,117,25],[163,36,117,26,"unregisterTaskAsync"],[163,55,117,45],[163,56,117,46,"taskName"],[163,64,117,54],[163,65,117,55],[164,4,118,0],[164,5,118,1],[165,4,118,1],[165,11,118,1,"_unregisterTaskAsync"],[165,31,118,1],[165,32,118,1,"apply"],[165,37,118,1],[165,44,118,1,"arguments"],[165,53,118,1],[166,2,118,1],[167,2,118,1],[167,11,125,22,"unregisterAllTasksAsync"],[167,34,125,45,"unregisterAllTasksAsync"],[167,35,125,45],[168,4,125,45],[168,11,125,45,"_unregisterAllTasksAsync"],[168,35,125,45],[168,36,125,45,"apply"],[168,41,125,45],[168,48,125,45,"arguments"],[168,57,125,45],[169,2,125,45],[170,2,125,45],[170,11,125,45,"_unregisterAllTasksAsync"],[170,36,125,45],[171,4,125,45,"_unregisterAllTasksAsync"],[171,28,125,45],[171,35,125,45,"_asyncToGenerator"],[171,52,125,45],[171,53,125,45,"default"],[171,60,125,45],[171,62,125,7],[171,75,125,48],[172,6,126,4],[172,10,126,8],[172,11,126,9,"ExpoTaskManager"],[172,26,126,24],[172,27,126,24,"default"],[172,34,126,24],[172,35,126,25,"unregisterAllTasksAsync"],[172,58,126,48],[172,60,126,50],[173,8,127,8],[173,14,127,14],[173,18,127,18,"UnavailabilityError"],[173,34,127,37],[173,35,127,37,"UnavailabilityError"],[173,54,127,37],[173,55,127,38],[173,68,127,51],[173,70,127,53],[173,95,127,78],[173,96,127,79],[174,6,128,4],[175,6,129,4],[175,12,129,10,"ExpoTaskManager"],[175,27,129,25],[175,28,129,25,"default"],[175,35,129,25],[175,36,129,26,"unregisterAllTasksAsync"],[175,59,129,49],[175,60,129,50],[175,61,129,51],[176,4,130,0],[176,5,130,1],[177,4,130,1],[177,11,130,1,"_unregisterAllTasksAsync"],[177,35,130,1],[177,36,130,1,"apply"],[177,41,130,1],[177,48,130,1,"arguments"],[177,57,130,1],[178,2,130,1],[179,2,131,0],[179,6,131,4,"ExpoTaskManager"],[179,21,131,19],[179,22,131,19,"default"],[179,29,131,19],[179,31,131,21],[180,4,132,4],[180,8,132,10,"eventEmitter"],[180,20,132,22],[180,23,132,25],[180,27,132,29,"LegacyEventEmitter"],[180,43,132,47],[180,44,132,47,"LegacyEventEmitter"],[180,62,132,47],[180,63,132,48,"ExpoTaskManager"],[180,78,132,63],[180,79,132,63,"default"],[180,86,132,63],[180,87,132,64],[181,4,133,4,"eventEmitter"],[181,16,133,16],[181,17,133,17,"addListener"],[181,28,133,28],[181,29,133,29,"ExpoTaskManager"],[181,44,133,44],[181,45,133,44,"default"],[181,52,133,44],[181,53,133,45,"EVENT_NAME"],[181,63,133,55],[182,6,133,55],[182,10,133,55,"_ref2"],[182,15,133,55],[182,22,133,55,"_asyncToGenerator"],[182,39,133,55],[182,40,133,55,"default"],[182,47,133,55],[182,49,133,57],[182,60,133,57,"_ref"],[182,64,133,57],[182,66,133,99],[183,8,133,99],[183,12,133,66,"data"],[183,16,133,70],[183,19,133,70,"_ref"],[183,23,133,70],[183,24,133,66,"data"],[183,28,133,70],[184,10,133,72,"error"],[184,15,133,77],[184,18,133,77,"_ref"],[184,22,133,77],[184,23,133,72,"error"],[184,28,133,77],[185,10,133,79,"executionInfo"],[185,23,133,92],[185,26,133,92,"_ref"],[185,30,133,92],[185,31,133,79,"executionInfo"],[185,44,133,92],[186,8,134,8],[186,12,134,16,"eventId"],[186,19,134,23],[186,22,134,38,"executionInfo"],[186,35,134,51],[186,36,134,16,"eventId"],[186,43,134,23],[187,10,134,25,"taskName"],[187,18,134,33],[187,21,134,38,"executionInfo"],[187,34,134,51],[187,35,134,25,"taskName"],[187,43,134,33],[188,8,135,8],[188,12,135,14,"taskExecutor"],[188,24,135,26],[188,27,135,29,"tasks"],[188,32,135,34],[188,33,135,35,"get"],[188,36,135,38],[188,37,135,39,"taskName"],[188,45,135,47],[188,46,135,48],[189,8,136,8],[189,12,136,12,"result"],[189,18,136,18],[189,21,136,21],[189,25,136,25],[190,8,137,8],[190,12,137,12,"taskExecutor"],[190,24,137,24],[190,26,137,26],[191,10,138,12],[191,14,138,16],[192,12,139,16],[193,12,140,16,"result"],[193,18,140,22],[193,27,140,31,"taskExecutor"],[193,39,140,43],[193,40,140,44],[194,14,140,46,"data"],[194,18,140,50],[195,14,140,52,"error"],[195,19,140,57],[196,14,140,59,"executionInfo"],[197,12,140,73],[197,13,140,74],[197,14,140,75],[198,10,141,12],[198,11,141,13],[198,12,142,12],[198,19,142,19,"error"],[198,24,142,24],[198,26,142,26],[199,12,143,16,"console"],[199,19,143,23],[199,20,143,24,"error"],[199,25,143,29],[199,26,143,30],[199,48,143,52,"taskName"],[199,56,143,60],[199,67,143,71],[199,69,143,73,"error"],[199,74,143,78],[199,75,143,79],[200,10,144,12],[200,11,144,13],[200,20,145,20],[201,12,146,16],[202,12,147,16],[202,18,147,22,"ExpoTaskManager"],[202,33,147,37],[202,34,147,37,"default"],[202,41,147,37],[202,42,147,38,"notifyTaskFinishedAsync"],[202,65,147,61],[202,66,147,62,"taskName"],[202,74,147,70],[202,76,147,72],[203,14,147,74,"eventId"],[203,21,147,81],[204,14,147,83,"result"],[205,12,147,90],[205,13,147,91],[205,14,147,92],[206,10,148,12],[207,8,149,8],[207,9,149,9],[207,15,150,13],[208,10,151,12,"console"],[208,17,151,19],[208,18,151,20,"warn"],[208,22,151,24],[208,23,151,25],[208,45,151,47,"taskName"],[208,53,151,55],[208,187,151,189],[208,188,151,190],[209,10,152,12],[210,10,153,12],[210,16,153,18,"ExpoTaskManager"],[210,31,153,33],[210,32,153,33,"default"],[210,39,153,33],[210,40,153,34,"notifyTaskFinishedAsync"],[210,63,153,57],[210,64,153,58,"taskName"],[210,72,153,66],[210,74,153,68],[211,12,153,70,"eventId"],[211,19,153,77],[212,12,153,79,"result"],[213,10,153,86],[213,11,153,87],[213,12,153,88],[214,10,154,12],[215,10,155,12],[216,10,156,12],[216,16,156,18,"ExpoTaskManager"],[216,31,156,33],[216,32,156,33,"default"],[216,39,156,33],[216,40,156,34,"unregisterTaskAsync"],[216,59,156,53],[216,60,156,54,"taskName"],[216,68,156,62],[216,69,156,63],[217,8,157,8],[218,6,158,4],[218,7,158,5],[219,6,158,5],[219,23,158,5,"_x4"],[219,26,158,5],[220,8,158,5],[220,15,158,5,"_ref2"],[220,20,158,5],[220,21,158,5,"apply"],[220,26,158,5],[220,33,158,5,"arguments"],[220,42,158,5],[221,6,158,5],[222,4,158,5],[222,8,158,6],[223,2,159,0],[224,2,160,0],[225,2,161,0],[226,0,162,0],[227,0,163,0],[228,0,164,0],[229,0,165,0],[230,0,166,0],[231,0,167,0],[232,2,161,0],[232,11,168,22,"isAvailableAsync"],[232,27,168,38,"isAvailableAsync"],[232,28,168,38],[233,4,168,38],[233,11,168,38,"_isAvailableAsync"],[233,28,168,38],[233,29,168,38,"apply"],[233,34,168,38],[233,41,168,38,"arguments"],[233,50,168,38],[234,2,168,38],[235,2,168,38],[235,11,168,38,"_isAvailableAsync"],[235,29,168,38],[236,4,168,38,"_isAvailableAsync"],[236,21,168,38],[236,28,168,38,"_asyncToGenerator"],[236,45,168,38],[236,46,168,38,"default"],[236,53,168,38],[236,55,168,7],[236,68,168,41],[237,6,169,4],[237,13,169,11,"ExpoTaskManager"],[237,28,169,26],[237,29,169,26,"default"],[237,36,169,26],[237,37,169,27,"isAvailableAsync"],[237,53,169,43],[237,54,169,44],[237,55,169,45],[238,4,170,0],[238,5,170,1],[239,4,170,1],[239,11,170,1,"_isAvailableAsync"],[239,28,170,1],[239,29,170,1,"apply"],[239,34,170,1],[239,41,170,1,"arguments"],[239,50,170,1],[240,2,170,1],[241,0,170,1],[241,3]],"functionMap":{"names":["<global>","_validate","defineTask","isTaskDefined","isTaskRegisteredAsync","getTaskOptionsAsync","getRegisteredTasksAsync","unregisterTaskAsync","unregisterAllTasksAsync","eventEmitter.addListener$argument_1","isAvailableAsync"],"mappings":"AAA;ACG;CDI;OEY;CFU;OGO;CHE;OIS;CJM;OKU;CLM;OM2B;CNK;OOU;CPM;OQO;CRK;yDSG;KTyB;OUU;CVE"},"hasCjsExports":false},"type":"js/module"}]}