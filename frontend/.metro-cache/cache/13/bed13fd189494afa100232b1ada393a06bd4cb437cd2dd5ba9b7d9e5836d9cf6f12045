{"dependencies":[{"name":"assert","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":33,"index":249},"end":{"line":6,"column":50,"index":266}}],"key":"Umsy3wQQm6DbjafRIeuw3teOkUU=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var __importDefault = this && this.__importDefault || function (mod) {\n    return mod && mod.__esModule ? mod : {\n      \"default\": mod\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  const assert_1 = __importDefault(require(_dependencyMap[0], \"assert\"));\n  function computeNextBackoffInterval(initialBackoff, previousRetryCount, {\n    multiplier = 1.5,\n    randomizationFactor = 0.25,\n    minBackoff = initialBackoff,\n    maxBackoff = Infinity\n  } = {}) {\n    assert_1.default(initialBackoff > 0, `The initial backoff interval must be positive`);\n    assert_1.default(previousRetryCount >= 0, `The previous retry count must not be negative`);\n    assert_1.default(multiplier >= 1, `The backoff multiplier must be greater than or equal to 1`);\n    assert_1.default(0 <= randomizationFactor && randomizationFactor <= 1, `The randomization factor must be between 0 and 1, inclusive`);\n    assert_1.default(minBackoff >= 0, `The minimum backoff interval must be positive`);\n    let nextBackoff = initialBackoff * multiplier ** previousRetryCount;\n    // Apply jitter within the negative to positive range of the randomization factor\n    let jitterFactor = 1 - randomizationFactor + 2 * randomizationFactor * Math.random();\n    return Math.min(Math.max(nextBackoff * jitterFactor, minBackoff), maxBackoff);\n  }\n  exports.computeNextBackoffInterval = computeNextBackoffInterval;\n});","lineCount":30,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0],[4,6,2,4,"__importDefault"],[4,21,2,19],[4,24,2,23],[4,28,2,27],[4,32,2,31],[4,36,2,35],[4,37,2,36,"__importDefault"],[4,52,2,51],[4,56,2,56],[4,66,2,66,"mod"],[4,69,2,69],[4,71,2,71],[5,4,3,4],[5,11,3,12,"mod"],[5,14,3,15],[5,18,3,19,"mod"],[5,21,3,22],[5,22,3,23,"__esModule"],[5,32,3,33],[5,35,3,37,"mod"],[5,38,3,40],[5,41,3,43],[6,6,3,45],[6,15,3,54],[6,17,3,56,"mod"],[7,4,3,60],[7,5,3,61],[8,2,4,0],[8,3,4,1],[9,2,5,0,"Object"],[9,8,5,6],[9,9,5,7,"defineProperty"],[9,23,5,21],[9,24,5,22,"exports"],[9,31,5,29],[9,33,5,31],[9,45,5,43],[9,47,5,45],[10,4,5,47,"value"],[10,9,5,52],[10,11,5,54],[11,2,5,59],[11,3,5,60],[11,4,5,61],[12,2,6,0],[12,8,6,6,"assert_1"],[12,16,6,14],[12,19,6,17,"__importDefault"],[12,34,6,32],[12,35,6,33,"require"],[12,42,6,40],[12,43,6,40,"_dependencyMap"],[12,57,6,40],[12,70,6,49],[12,71,6,50],[12,72,6,51],[13,2,7,0],[13,11,7,9,"computeNextBackoffInterval"],[13,37,7,35,"computeNextBackoffInterval"],[13,38,7,36,"initialBackoff"],[13,52,7,50],[13,54,7,52,"previousRetryCount"],[13,72,7,70],[13,74,7,72],[14,4,7,74,"multiplier"],[14,14,7,84],[14,17,7,87],[14,20,7,90],[15,4,7,92,"randomizationFactor"],[15,23,7,111],[15,26,7,114],[15,30,7,118],[16,4,7,120,"minBackoff"],[16,14,7,130],[16,17,7,133,"initialBackoff"],[16,31,7,147],[17,4,7,149,"maxBackoff"],[17,14,7,159],[17,17,7,162,"Infinity"],[18,2,7,172],[18,3,7,173],[18,6,7,176],[18,7,7,177],[18,8,7,178],[18,10,7,180],[19,4,8,4,"assert_1"],[19,12,8,12],[19,13,8,13,"default"],[19,20,8,20],[19,21,8,21,"initialBackoff"],[19,35,8,35],[19,38,8,38],[19,39,8,39],[19,41,8,41],[19,88,8,88],[19,89,8,89],[20,4,9,4,"assert_1"],[20,12,9,12],[20,13,9,13,"default"],[20,20,9,20],[20,21,9,21,"previousRetryCount"],[20,39,9,39],[20,43,9,43],[20,44,9,44],[20,46,9,46],[20,93,9,93],[20,94,9,94],[21,4,10,4,"assert_1"],[21,12,10,12],[21,13,10,13,"default"],[21,20,10,20],[21,21,10,21,"multiplier"],[21,31,10,31],[21,35,10,35],[21,36,10,36],[21,38,10,38],[21,97,10,97],[21,98,10,98],[22,4,11,4,"assert_1"],[22,12,11,12],[22,13,11,13,"default"],[22,20,11,20],[22,21,11,21],[22,22,11,22],[22,26,11,26,"randomizationFactor"],[22,45,11,45],[22,49,11,49,"randomizationFactor"],[22,68,11,68],[22,72,11,72],[22,73,11,73],[22,75,11,75],[22,136,11,136],[22,137,11,137],[23,4,12,4,"assert_1"],[23,12,12,12],[23,13,12,13,"default"],[23,20,12,20],[23,21,12,21,"minBackoff"],[23,31,12,31],[23,35,12,35],[23,36,12,36],[23,38,12,38],[23,85,12,85],[23,86,12,86],[24,4,13,4],[24,8,13,8,"nextBackoff"],[24,19,13,19],[24,22,13,22,"initialBackoff"],[24,36,13,36],[24,39,13,39,"multiplier"],[24,49,13,49],[24,53,13,53,"previousRetryCount"],[24,71,13,71],[25,4,14,4],[26,4,15,4],[26,8,15,8,"jitterFactor"],[26,20,15,20],[26,23,15,23],[26,24,15,24],[26,27,15,27,"randomizationFactor"],[26,46,15,46],[26,49,15,49],[26,50,15,50],[26,53,15,53,"randomizationFactor"],[26,72,15,72],[26,75,15,75,"Math"],[26,79,15,79],[26,80,15,80,"random"],[26,86,15,86],[26,87,15,87],[26,88,15,88],[27,4,16,4],[27,11,16,11,"Math"],[27,15,16,15],[27,16,16,16,"min"],[27,19,16,19],[27,20,16,20,"Math"],[27,24,16,24],[27,25,16,25,"max"],[27,28,16,28],[27,29,16,29,"nextBackoff"],[27,40,16,40],[27,43,16,43,"jitterFactor"],[27,55,16,55],[27,57,16,57,"minBackoff"],[27,67,16,67],[27,68,16,68],[27,70,16,70,"maxBackoff"],[27,80,16,80],[27,81,16,81],[28,2,17,0],[29,2,18,0,"exports"],[29,9,18,7],[29,10,18,8,"computeNextBackoffInterval"],[29,36,18,34],[29,39,18,37,"computeNextBackoffInterval"],[29,65,18,63],[30,0,18,64],[30,3]],"functionMap":{"names":["<global>","<anonymous>","computeNextBackoffInterval"],"mappings":"AAA;wDCC;CDE;AEG;CFU"},"hasCjsExports":true},"type":"js/module"}]}