{"dependencies":[{"name":"@babel/runtime/helpers/arrayLikeToArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"GXS4FldiTeP8Bh/xxdQ590oUdm0=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/toArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"yxbT34yjmkVZuhOKwnPlwW2nTdA=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"yg7e6laZwmpbIvId5jovq9ugXp8=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30=","exportNames":["*"],"imports":1}},{"name":"./path","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":54},"end":{"line":2,"column":35,"index":89}}],"key":"fLgVgLGCXWzozZVWish/SygMBB4=","exportNames":["*"],"imports":1}},{"name":"./url","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":90},"end":{"line":3,"column":53,"index":143}}],"key":"yvV8OElsINQcWHj+V4jjurOl35o=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  function _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = {};\n    if (e) Object.keys(e).forEach(function (k) {\n      var d = Object.getOwnPropertyDescriptor(e, k);\n      Object.defineProperty(n, k, d.get ? d : {\n        enumerable: true,\n        get: function () {\n          return e[k];\n        }\n      });\n    });\n    n.default = e;\n    return n;\n  }\n  Object.defineProperty(exports, \"PathUtilities\", {\n    enumerable: true,\n    get: function () {\n      return PathUtilities;\n    }\n  });\n  var _babelRuntimeHelpersArrayLikeToArray = require(_dependencyMap[0], \"@babel/runtime/helpers/arrayLikeToArray\");\n  var _arrayLikeToArray = _interopDefault(_babelRuntimeHelpersArrayLikeToArray);\n  var _babelRuntimeHelpersToArray = require(_dependencyMap[1], \"@babel/runtime/helpers/toArray\");\n  var _toArray = _interopDefault(_babelRuntimeHelpersToArray);\n  var _babelRuntimeHelpersClassCallCheck = require(_dependencyMap[2], \"@babel/runtime/helpers/classCallCheck\");\n  var _classCallCheck = _interopDefault(_babelRuntimeHelpersClassCallCheck);\n  var _babelRuntimeHelpersCreateClass = require(_dependencyMap[3], \"@babel/runtime/helpers/createClass\");\n  var _createClass = _interopDefault(_babelRuntimeHelpersCreateClass);\n  var _path = require(_dependencyMap[4], \"./path\");\n  var nodePath = _interopNamespace(_path);\n  var _url = require(_dependencyMap[5], \"./url\");\n  function uriObjectToString(path) {\n    return typeof path === 'string' ? path : path.uri;\n  }\n  var PathUtilities = /*#__PURE__*/function () {\n    function PathUtilities() {\n      (0, _classCallCheck.default)(this, PathUtilities);\n    }\n    return (0, _createClass.default)(PathUtilities, null, [{\n      key: \"join\",\n      value:\n      /**\n       * Joins path segments into a single path.\n       * @param paths - An array of path segments.\n       * @returns A string representing the joined path.\n       */\n      function join() {\n        for (var _len = arguments.length, paths = new Array(_len), _key = 0; _key < _len; _key++) {\n          paths[_key] = arguments[_key];\n        }\n        var _paths$map = paths.map(uriObjectToString),\n          _paths$map2 = (0, _toArray.default)(_paths$map),\n          firstSegment = _paths$map2[0],\n          rest = (0, _arrayLikeToArray.default)(_paths$map2).slice(1);\n        var pathAsUrl = (0, _url.asUrl)(firstSegment);\n        if (pathAsUrl) {\n          pathAsUrl.pathname = nodePath.join(pathAsUrl.pathname, ...rest.map(_url.encodeURLChars));\n          return pathAsUrl.toString();\n        }\n        return nodePath.join(firstSegment, ...rest.map(_url.encodeURLChars));\n      }\n\n      /**\n       * Resolves a relative path to an absolute path.\n       * @param from - The base path.\n       * @param to - The relative path.\n       * @returns A string representing the resolved path.\n       */\n    }, {\n      key: \"relative\",\n      value: function relative(from, to) {\n        var fromString = uriObjectToString(from);\n        var toString = uriObjectToString(to);\n\n        // If the first path is a file URL, convert it to a path\n        if ((0, _url.isUrl)(fromString)) {\n          from = (0, _url.asUrl)(fromString).pathname;\n        }\n        // If the second path is a file URL, convert it to a path\n        if ((0, _url.isUrl)(toString)) {\n          to = (0, _url.asUrl)(toString).pathname;\n        }\n        return nodePath.relative(fromString, toString);\n      }\n\n      /**\n       * Checks if a path is absolute.\n       * @param path - The path to check.\n       * @returns `true` if the path is absolute, `false` otherwise.\n       */\n    }, {\n      key: \"isAbsolute\",\n      value: function isAbsolute(path) {\n        var pathString = uriObjectToString(path);\n        if ((0, _url.isUrl)(pathString)) {\n          return true;\n        }\n        return nodePath.isAbsolute(pathString);\n      }\n\n      /**\n       * Normalizes a path.\n       * @param path - The path to normalize.\n       * @returns A string representing the normalized path.\n       */\n    }, {\n      key: \"normalize\",\n      value: function normalize(path) {\n        var pathString = uriObjectToString(path);\n        var pathURL = (0, _url.asUrl)((0, _url.encodeURLChars)(pathString));\n        if (pathURL) {\n          pathURL.pathname = (0, _url.encodeURLChars)(nodePath.normalize(decodeURIComponent(pathURL.pathname)));\n          return pathURL.toString();\n        }\n        return nodePath.normalize(pathString);\n      }\n\n      /**\n       * Returns the directory name of a path.\n       * @param path - The path to get the directory name from.\n       * @returns A string representing the directory name.\n       */\n    }, {\n      key: \"dirname\",\n      value: function dirname(path) {\n        var pathString = uriObjectToString(path);\n        var pathURL = (0, _url.asUrl)(pathString);\n        if (pathURL) {\n          pathURL.pathname = (0, _url.encodeURLChars)(nodePath.dirname(decodeURIComponent(pathURL.pathname)));\n          return pathURL.toString();\n        }\n        return nodePath.dirname(pathString);\n      }\n\n      /**\n       * Returns the base name of a path.\n       * @param path - The path to get the base name from.\n       * @param ext - An optional file extension.\n       * @returns A string representing the base name.\n       */\n    }, {\n      key: \"basename\",\n      value: function basename(path, ext) {\n        var pathString = uriObjectToString(path);\n        var pathURL = (0, _url.asUrl)(pathString);\n        if (pathURL) {\n          return nodePath.basename(decodeURIComponent(pathURL.pathname));\n        }\n        return nodePath.basename(pathString, ext);\n      }\n\n      /**\n       * Returns the extension of a path.\n       * @param path - The path to get the extension from.\n       * @returns A string representing the extension.\n       */\n    }, {\n      key: \"extname\",\n      value: function extname(path) {\n        var pathString = uriObjectToString(path);\n        var pathURL = (0, _url.asUrl)(pathString);\n        if (pathURL) {\n          return nodePath.extname(decodeURIComponent(pathURL.pathname));\n        }\n        return nodePath.extname(pathString);\n      }\n\n      /**\n       * Parses a path into its components.\n       * @param path - The path to parse.\n       * @returns An object containing the parsed path components.\n       */\n    }, {\n      key: \"parse\",\n      value: function parse(path) {\n        var pathString = uriObjectToString(path);\n        var pathURL = (0, _url.asUrl)(pathString);\n        if (pathURL) {\n          return nodePath.parse(decodeURIComponent(pathURL.pathname));\n        }\n        return nodePath.parse(pathString);\n      }\n    }]);\n  }();\n});","lineCount":197,"map":[[27,2,9,0,"Object"],[27,8,9,0],[27,9,9,0,"defineProperty"],[27,23,9,0],[27,24,9,0,"exports"],[27,31,9,0],[28,4,9,0,"enumerable"],[28,14,9,0],[29,4,9,0,"get"],[29,7,9,0],[29,18,9,0,"get"],[29,19,9,0],[30,6,9,0],[30,13,9,0,"PathUtilities"],[30,26,9,0],[31,4,9,0],[32,2,9,0],[33,2,137,1],[33,6,137,1,"_babelRuntimeHelpersArrayLikeToArray"],[33,42,137,1],[33,45,137,1,"require"],[33,52,137,1],[33,53,137,1,"_dependencyMap"],[33,67,137,1],[34,2,137,1],[34,6,137,1,"_arrayLikeToArray"],[34,23,137,1],[34,26,137,1,"_interopDefault"],[34,41,137,1],[34,42,137,1,"_babelRuntimeHelpersArrayLikeToArray"],[34,78,137,1],[35,2,137,1],[35,6,137,1,"_babelRuntimeHelpersToArray"],[35,33,137,1],[35,36,137,1,"require"],[35,43,137,1],[35,44,137,1,"_dependencyMap"],[35,58,137,1],[36,2,137,1],[36,6,137,1,"_toArray"],[36,14,137,1],[36,17,137,1,"_interopDefault"],[36,32,137,1],[36,33,137,1,"_babelRuntimeHelpersToArray"],[36,60,137,1],[37,2,137,1],[37,6,137,1,"_babelRuntimeHelpersClassCallCheck"],[37,40,137,1],[37,43,137,1,"require"],[37,50,137,1],[37,51,137,1,"_dependencyMap"],[37,65,137,1],[38,2,137,1],[38,6,137,1,"_classCallCheck"],[38,21,137,1],[38,24,137,1,"_interopDefault"],[38,39,137,1],[38,40,137,1,"_babelRuntimeHelpersClassCallCheck"],[38,74,137,1],[39,2,137,1],[39,6,137,1,"_babelRuntimeHelpersCreateClass"],[39,37,137,1],[39,40,137,1,"require"],[39,47,137,1],[39,48,137,1,"_dependencyMap"],[39,62,137,1],[40,2,137,1],[40,6,137,1,"_createClass"],[40,18,137,1],[40,21,137,1,"_interopDefault"],[40,36,137,1],[40,37,137,1,"_babelRuntimeHelpersCreateClass"],[40,68,137,1],[41,2,2,0],[41,6,2,0,"_path"],[41,11,2,0],[41,14,2,0,"require"],[41,21,2,0],[41,22,2,0,"_dependencyMap"],[41,36,2,0],[42,2,2,0],[42,6,2,0,"nodePath"],[42,14,2,0],[42,17,2,0,"_interopNamespace"],[42,34,2,0],[42,35,2,0,"_path"],[42,40,2,0],[43,2,3,0],[43,6,3,0,"_url"],[43,10,3,0],[43,13,3,0,"require"],[43,20,3,0],[43,21,3,0,"_dependencyMap"],[43,35,3,0],[44,2,5,0],[44,11,5,9,"uriObjectToString"],[44,28,5,26,"uriObjectToString"],[44,29,5,27,"path"],[44,33,5,58],[44,35,5,68],[45,4,6,2],[45,11,6,9],[45,18,6,16,"path"],[45,22,6,20],[45,27,6,25],[45,35,6,33],[45,38,6,36,"path"],[45,42,6,40],[45,45,6,43,"path"],[45,49,6,47],[45,50,6,48,"uri"],[45,53,6,51],[46,2,7,0],[47,2,7,1],[47,6,9,13,"PathUtilities"],[47,19,9,26],[48,4,9,26],[48,13,9,26,"PathUtilities"],[48,27,9,26],[49,6,9,26],[49,10,9,26,"_classCallCheck"],[49,25,9,26],[49,26,9,26,"default"],[49,33,9,26],[49,41,9,26,"PathUtilities"],[49,54,9,26],[50,4,9,26],[51,4,9,26],[51,15,9,26,"_createClass"],[51,27,9,26],[51,28,9,26,"default"],[51,35,9,26],[51,37,9,26,"PathUtilities"],[51,50,9,26],[52,6,9,26,"key"],[52,9,9,26],[53,6,9,26,"value"],[53,11,9,26],[54,6,10,2],[55,0,11,0],[56,0,12,0],[57,0,13,0],[58,0,14,0],[59,6,15,2],[59,15,15,9,"join"],[59,19,15,13,"join"],[59,20,15,13],[59,22,15,63],[60,8,15,63],[60,17,15,63,"_len"],[60,21,15,63],[60,24,15,63,"arguments"],[60,33,15,63],[60,34,15,63,"length"],[60,40,15,63],[60,42,15,17,"paths"],[60,47,15,22],[60,54,15,22,"Array"],[60,59,15,22],[60,60,15,22,"_len"],[60,64,15,22],[60,67,15,22,"_key"],[60,71,15,22],[60,77,15,22,"_key"],[60,81,15,22],[60,84,15,22,"_len"],[60,88,15,22],[60,90,15,22,"_key"],[60,94,15,22],[61,10,15,17,"paths"],[61,15,15,22],[61,16,15,22,"_key"],[61,20,15,22],[61,24,15,22,"arguments"],[61,33,15,22],[61,34,15,22,"_key"],[61,38,15,22],[62,8,15,22],[63,8,16,4],[63,12,16,4,"_paths$map"],[63,22,16,4],[63,25,16,36,"paths"],[63,30,16,41],[63,31,16,42,"map"],[63,34,16,45],[63,35,16,46,"uriObjectToString"],[63,52,16,63],[63,53,16,64],[64,10,16,64,"_paths$map2"],[64,21,16,64],[64,28,16,64,"_toArray"],[64,36,16,64],[64,37,16,64,"default"],[64,44,16,64],[64,46,16,64,"_paths$map"],[64,56,16,64],[65,10,16,11,"firstSegment"],[65,22,16,23],[65,25,16,23,"_paths$map2"],[65,36,16,23],[66,10,16,28,"rest"],[66,14,16,32],[66,21,16,32,"_arrayLikeToArray"],[66,38,16,32],[66,39,16,32,"default"],[66,46,16,32],[66,48,16,32,"_paths$map2"],[66,59,16,32],[66,61,16,32,"slice"],[66,66,16,32],[67,8,17,4],[67,12,17,10,"pathAsUrl"],[67,21,17,19],[67,24,17,22],[67,28,17,22,"asUrl"],[67,32,17,27],[67,33,17,27,"asUrl"],[67,38,17,27],[67,40,17,28,"firstSegment"],[67,52,17,40],[67,53,17,41],[68,8,18,4],[68,12,18,8,"pathAsUrl"],[68,21,18,17],[68,23,18,19],[69,10,19,6,"pathAsUrl"],[69,19,19,15],[69,20,19,16,"pathname"],[69,28,19,24],[69,31,19,27,"nodePath"],[69,39,19,35],[69,40,19,36,"join"],[69,44,19,40],[69,45,19,41,"pathAsUrl"],[69,54,19,50],[69,55,19,51,"pathname"],[69,63,19,59],[69,65,19,61],[69,68,19,64,"rest"],[69,72,19,68],[69,73,19,69,"map"],[69,76,19,72],[69,77,19,73,"encodeURLChars"],[69,81,19,87],[69,82,19,87,"encodeURLChars"],[69,96,19,87],[69,97,19,88],[69,98,19,89],[70,10,20,6],[70,17,20,13,"pathAsUrl"],[70,26,20,22],[70,27,20,23,"toString"],[70,35,20,31],[70,36,20,32],[70,37,20,33],[71,8,21,4],[72,8,22,4],[72,15,22,11,"nodePath"],[72,23,22,19],[72,24,22,20,"join"],[72,28,22,24],[72,29,22,25,"firstSegment"],[72,41,22,37],[72,43,22,39],[72,46,22,42,"rest"],[72,50,22,46],[72,51,22,47,"map"],[72,54,22,50],[72,55,22,51,"encodeURLChars"],[72,59,22,65],[72,60,22,65,"encodeURLChars"],[72,74,22,65],[72,75,22,66],[72,76,22,67],[73,6,23,2],[75,6,25,2],[76,0,26,0],[77,0,27,0],[78,0,28,0],[79,0,29,0],[80,0,30,0],[81,4,25,2],[82,6,25,2,"key"],[82,9,25,2],[83,6,25,2,"value"],[83,11,25,2],[83,13,31,2],[83,22,31,9,"relative"],[83,30,31,17,"relative"],[83,31,31,18,"from"],[83,35,31,49],[83,37,31,51,"to"],[83,39,31,80],[83,41,31,90],[84,8,32,4],[84,12,32,10,"fromString"],[84,22,32,20],[84,25,32,23,"uriObjectToString"],[84,42,32,40],[84,43,32,41,"from"],[84,47,32,45],[84,48,32,46],[85,8,33,4],[85,12,33,10,"toString"],[85,20,33,18],[85,23,33,21,"uriObjectToString"],[85,40,33,38],[85,41,33,39,"to"],[85,43,33,41],[85,44,33,42],[87,8,35,4],[88,8,36,4],[88,12,36,8],[88,16,36,8,"isUrl"],[88,20,36,13],[88,21,36,13,"isUrl"],[88,26,36,13],[88,28,36,14,"fromString"],[88,38,36,24],[88,39,36,25],[88,41,36,27],[89,10,37,6,"from"],[89,14,37,10],[89,17,37,13],[89,21,37,13,"asUrl"],[89,25,37,18],[89,26,37,18,"asUrl"],[89,31,37,18],[89,33,37,19,"fromString"],[89,43,37,29],[89,44,37,30],[89,45,37,32,"pathname"],[89,53,37,40],[90,8,38,4],[91,8,39,4],[92,8,40,4],[92,12,40,8],[92,16,40,8,"isUrl"],[92,20,40,13],[92,21,40,13,"isUrl"],[92,26,40,13],[92,28,40,14,"toString"],[92,36,40,22],[92,37,40,23],[92,39,40,25],[93,10,41,6,"to"],[93,12,41,8],[93,15,41,11],[93,19,41,11,"asUrl"],[93,23,41,16],[93,24,41,16,"asUrl"],[93,29,41,16],[93,31,41,17,"toString"],[93,39,41,25],[93,40,41,26],[93,41,41,28,"pathname"],[93,49,41,36],[94,8,42,4],[95,8,43,4],[95,15,43,11,"nodePath"],[95,23,43,19],[95,24,43,20,"relative"],[95,32,43,28],[95,33,43,29,"fromString"],[95,43,43,39],[95,45,43,41,"toString"],[95,53,43,49],[95,54,43,50],[96,6,44,2],[98,6,46,2],[99,0,47,0],[100,0,48,0],[101,0,49,0],[102,0,50,0],[103,4,46,2],[104,6,46,2,"key"],[104,9,46,2],[105,6,46,2,"value"],[105,11,46,2],[105,13,51,2],[105,22,51,9,"isAbsolute"],[105,32,51,19,"isAbsolute"],[105,33,51,20,"path"],[105,37,51,51],[105,39,51,62],[106,8,52,4],[106,12,52,10,"pathString"],[106,22,52,20],[106,25,52,23,"uriObjectToString"],[106,42,52,40],[106,43,52,41,"path"],[106,47,52,45],[106,48,52,46],[107,8,53,4],[107,12,53,8],[107,16,53,8,"isUrl"],[107,20,53,13],[107,21,53,13,"isUrl"],[107,26,53,13],[107,28,53,14,"pathString"],[107,38,53,24],[107,39,53,25],[107,41,53,27],[108,10,54,6],[108,17,54,13],[108,21,54,17],[109,8,55,4],[110,8,56,4],[110,15,56,11,"nodePath"],[110,23,56,19],[110,24,56,20,"isAbsolute"],[110,34,56,30],[110,35,56,31,"pathString"],[110,45,56,41],[110,46,56,42],[111,6,57,2],[113,6,59,2],[114,0,60,0],[115,0,61,0],[116,0,62,0],[117,0,63,0],[118,4,59,2],[119,6,59,2,"key"],[119,9,59,2],[120,6,59,2,"value"],[120,11,59,2],[120,13,64,2],[120,22,64,9,"normalize"],[120,31,64,18,"normalize"],[120,32,64,19,"path"],[120,36,64,50],[120,38,64,60],[121,8,65,4],[121,12,65,10,"pathString"],[121,22,65,20],[121,25,65,23,"uriObjectToString"],[121,42,65,40],[121,43,65,41,"path"],[121,47,65,45],[121,48,65,46],[122,8,66,4],[122,12,66,10,"pathURL"],[122,19,66,17],[122,22,66,20],[122,26,66,20,"asUrl"],[122,30,66,25],[122,31,66,25,"asUrl"],[122,36,66,25],[122,38,66,26],[122,42,66,26,"encodeURLChars"],[122,46,66,40],[122,47,66,40,"encodeURLChars"],[122,61,66,40],[122,63,66,41,"pathString"],[122,73,66,51],[122,74,66,52],[122,75,66,53],[123,8,67,4],[123,12,67,8,"pathURL"],[123,19,67,15],[123,21,67,17],[124,10,68,6,"pathURL"],[124,17,68,13],[124,18,68,14,"pathname"],[124,26,68,22],[124,29,68,25],[124,33,68,25,"encodeURLChars"],[124,37,68,39],[124,38,68,39,"encodeURLChars"],[124,52,68,39],[124,54,68,40,"nodePath"],[124,62,68,48],[124,63,68,49,"normalize"],[124,72,68,58],[124,73,68,59,"decodeURIComponent"],[124,91,68,77],[124,92,68,78,"pathURL"],[124,99,68,85],[124,100,68,86,"pathname"],[124,108,68,94],[124,109,68,95],[124,110,68,96],[124,111,68,97],[125,10,69,6],[125,17,69,13,"pathURL"],[125,24,69,20],[125,25,69,21,"toString"],[125,33,69,29],[125,34,69,30],[125,35,69,31],[126,8,70,4],[127,8,71,4],[127,15,71,11,"nodePath"],[127,23,71,19],[127,24,71,20,"normalize"],[127,33,71,29],[127,34,71,30,"pathString"],[127,44,71,40],[127,45,71,41],[128,6,72,2],[130,6,74,2],[131,0,75,0],[132,0,76,0],[133,0,77,0],[134,0,78,0],[135,4,74,2],[136,6,74,2,"key"],[136,9,74,2],[137,6,74,2,"value"],[137,11,74,2],[137,13,79,2],[137,22,79,9,"dirname"],[137,29,79,16,"dirname"],[137,30,79,17,"path"],[137,34,79,48],[137,36,79,58],[138,8,80,4],[138,12,80,10,"pathString"],[138,22,80,20],[138,25,80,23,"uriObjectToString"],[138,42,80,40],[138,43,80,41,"path"],[138,47,80,45],[138,48,80,46],[139,8,81,4],[139,12,81,10,"pathURL"],[139,19,81,17],[139,22,81,20],[139,26,81,20,"asUrl"],[139,30,81,25],[139,31,81,25,"asUrl"],[139,36,81,25],[139,38,81,26,"pathString"],[139,48,81,36],[139,49,81,37],[140,8,82,4],[140,12,82,8,"pathURL"],[140,19,82,15],[140,21,82,17],[141,10,83,6,"pathURL"],[141,17,83,13],[141,18,83,14,"pathname"],[141,26,83,22],[141,29,83,25],[141,33,83,25,"encodeURLChars"],[141,37,83,39],[141,38,83,39,"encodeURLChars"],[141,52,83,39],[141,54,83,40,"nodePath"],[141,62,83,48],[141,63,83,49,"dirname"],[141,70,83,56],[141,71,83,57,"decodeURIComponent"],[141,89,83,75],[141,90,83,76,"pathURL"],[141,97,83,83],[141,98,83,84,"pathname"],[141,106,83,92],[141,107,83,93],[141,108,83,94],[141,109,83,95],[142,10,84,6],[142,17,84,13,"pathURL"],[142,24,84,20],[142,25,84,21,"toString"],[142,33,84,29],[142,34,84,30],[142,35,84,31],[143,8,85,4],[144,8,86,4],[144,15,86,11,"nodePath"],[144,23,86,19],[144,24,86,20,"dirname"],[144,31,86,27],[144,32,86,28,"pathString"],[144,42,86,38],[144,43,86,39],[145,6,87,2],[147,6,89,2],[148,0,90,0],[149,0,91,0],[150,0,92,0],[151,0,93,0],[152,0,94,0],[153,4,89,2],[154,6,89,2,"key"],[154,9,89,2],[155,6,89,2,"value"],[155,11,89,2],[155,13,95,2],[155,22,95,9,"basename"],[155,30,95,17,"basename"],[155,31,95,18,"path"],[155,35,95,49],[155,37,95,51,"ext"],[155,40,95,63],[155,42,95,73],[156,8,96,4],[156,12,96,10,"pathString"],[156,22,96,20],[156,25,96,23,"uriObjectToString"],[156,42,96,40],[156,43,96,41,"path"],[156,47,96,45],[156,48,96,46],[157,8,97,4],[157,12,97,10,"pathURL"],[157,19,97,17],[157,22,97,20],[157,26,97,20,"asUrl"],[157,30,97,25],[157,31,97,25,"asUrl"],[157,36,97,25],[157,38,97,26,"pathString"],[157,48,97,36],[157,49,97,37],[158,8,98,4],[158,12,98,8,"pathURL"],[158,19,98,15],[158,21,98,17],[159,10,99,6],[159,17,99,13,"nodePath"],[159,25,99,21],[159,26,99,22,"basename"],[159,34,99,30],[159,35,99,31,"decodeURIComponent"],[159,53,99,49],[159,54,99,50,"pathURL"],[159,61,99,57],[159,62,99,58,"pathname"],[159,70,99,66],[159,71,99,67],[159,72,99,68],[160,8,100,4],[161,8,101,4],[161,15,101,11,"nodePath"],[161,23,101,19],[161,24,101,20,"basename"],[161,32,101,28],[161,33,101,29,"pathString"],[161,43,101,39],[161,45,101,41,"ext"],[161,48,101,44],[161,49,101,45],[162,6,102,2],[164,6,104,2],[165,0,105,0],[166,0,106,0],[167,0,107,0],[168,0,108,0],[169,4,104,2],[170,6,104,2,"key"],[170,9,104,2],[171,6,104,2,"value"],[171,11,104,2],[171,13,109,2],[171,22,109,9,"extname"],[171,29,109,16,"extname"],[171,30,109,17,"path"],[171,34,109,48],[171,36,109,58],[172,8,110,4],[172,12,110,10,"pathString"],[172,22,110,20],[172,25,110,23,"uriObjectToString"],[172,42,110,40],[172,43,110,41,"path"],[172,47,110,45],[172,48,110,46],[173,8,111,4],[173,12,111,10,"pathURL"],[173,19,111,17],[173,22,111,20],[173,26,111,20,"asUrl"],[173,30,111,25],[173,31,111,25,"asUrl"],[173,36,111,25],[173,38,111,26,"pathString"],[173,48,111,36],[173,49,111,37],[174,8,112,4],[174,12,112,8,"pathURL"],[174,19,112,15],[174,21,112,17],[175,10,113,6],[175,17,113,13,"nodePath"],[175,25,113,21],[175,26,113,22,"extname"],[175,33,113,29],[175,34,113,30,"decodeURIComponent"],[175,52,113,48],[175,53,113,49,"pathURL"],[175,60,113,56],[175,61,113,57,"pathname"],[175,69,113,65],[175,70,113,66],[175,71,113,67],[176,8,114,4],[177,8,115,4],[177,15,115,11,"nodePath"],[177,23,115,19],[177,24,115,20,"extname"],[177,31,115,27],[177,32,115,28,"pathString"],[177,42,115,38],[177,43,115,39],[178,6,116,2],[180,6,118,2],[181,0,119,0],[182,0,120,0],[183,0,121,0],[184,0,122,0],[185,4,118,2],[186,6,118,2,"key"],[186,9,118,2],[187,6,118,2,"value"],[187,11,118,2],[187,13,123,2],[187,22,123,9,"parse"],[187,27,123,14,"parse"],[187,28,123,15,"path"],[187,32,123,46],[187,34,129,4],[188,8,130,4],[188,12,130,10,"pathString"],[188,22,130,20],[188,25,130,23,"uriObjectToString"],[188,42,130,40],[188,43,130,41,"path"],[188,47,130,45],[188,48,130,46],[189,8,131,4],[189,12,131,10,"pathURL"],[189,19,131,17],[189,22,131,20],[189,26,131,20,"asUrl"],[189,30,131,25],[189,31,131,25,"asUrl"],[189,36,131,25],[189,38,131,26,"pathString"],[189,48,131,36],[189,49,131,37],[190,8,132,4],[190,12,132,8,"pathURL"],[190,19,132,15],[190,21,132,17],[191,10,133,6],[191,17,133,13,"nodePath"],[191,25,133,21],[191,26,133,22,"parse"],[191,31,133,27],[191,32,133,28,"decodeURIComponent"],[191,50,133,46],[191,51,133,47,"pathURL"],[191,58,133,54],[191,59,133,55,"pathname"],[191,67,133,63],[191,68,133,64],[191,69,133,65],[192,8,134,4],[193,8,135,4],[193,15,135,11,"nodePath"],[193,23,135,19],[193,24,135,20,"parse"],[193,29,135,25],[193,30,135,26,"pathString"],[193,40,135,36],[193,41,135,37],[194,6,136,2],[195,4,136,3],[196,2,136,3],[197,0,136,3],[197,3]],"functionMap":{"names":["<global>","uriObjectToString","PathUtilities","PathUtilities.join","PathUtilities.relative","PathUtilities.isAbsolute","PathUtilities.normalize","PathUtilities.dirname","PathUtilities.basename","PathUtilities.extname","PathUtilities.parse"],"mappings":"AAA;ACI;CDE;OEE;ECM;GDQ;EEQ;GFa;EGO;GHM;EIO;GJQ;EKO;GLQ;EMQ;GNO;EOO;GPO;EQO;GRa;CFC"},"hasCjsExports":false},"type":"js/module"}]}