{"dependencies":[{"name":"expo-modules-core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":76,"index":76}}],"key":"fU8WLIPqoAGygnPbZ/QJiQQfXEY=","exportNames":["*"],"imports":1}},{"name":"./NotificationsEmitterModule","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":77},"end":{"line":2,"column":70,"index":147}}],"key":"Cb5A/UwoHsQ/oVPs9GPgQtVh11E=","exportNames":["*"],"imports":1}},{"name":"./utils/mapNotificationResponse","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":148},"end":{"line":3,"column":91,"index":239}}],"key":"JkOfaen2LZL/eo5bIUuRnscMf0c=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"DEFAULT_ACTION_IDENTIFIER\", {\n    enumerable: true,\n    get: function () {\n      return DEFAULT_ACTION_IDENTIFIER;\n    }\n  });\n  exports.addNotificationReceivedListener = addNotificationReceivedListener;\n  exports.addNotificationsDroppedListener = addNotificationsDroppedListener;\n  exports.addNotificationResponseReceivedListener = addNotificationResponseReceivedListener;\n  exports.getLastNotificationResponseAsync = getLastNotificationResponseAsync;\n  exports.getLastNotificationResponse = getLastNotificationResponse;\n  exports.clearLastNotificationResponseAsync = clearLastNotificationResponseAsync;\n  exports.clearLastNotificationResponse = clearLastNotificationResponse;\n  exports.addNotificationResponseClearedListener = addNotificationResponseClearedListener;\n  var _expoModulesCore = require(_dependencyMap[0], \"expo-modules-core\");\n  var _NotificationsEmitterModule = require(_dependencyMap[1], \"./NotificationsEmitterModule\");\n  var NotificationsEmitterModule = _interopDefault(_NotificationsEmitterModule);\n  var _utilsMapNotificationResponse = require(_dependencyMap[2], \"./utils/mapNotificationResponse\");\n  // Web uses SyntheticEventEmitter\n  const emitter = new _expoModulesCore.LegacyEventEmitter(NotificationsEmitterModule.default);\n  const didReceiveNotificationEventName = 'onDidReceiveNotification';\n  const didDropNotificationsEventName = 'onNotificationsDeleted';\n  const didReceiveNotificationResponseEventName = 'onDidReceiveNotificationResponse';\n  const didClearNotificationResponseEventName = 'onDidClearNotificationResponse';\n  // @docsMissing\n  const DEFAULT_ACTION_IDENTIFIER = 'expo.modules.notifications.actions.DEFAULT';\n  /**\n   * Listeners registered by this method will be called whenever a notification is received while the app is running.\n   * @param listener A function accepting a notification ([`Notification`](#notification)) as an argument.\n   * @return An [`EventSubscription`](#eventsubscription) object represents the subscription of the provided listener.\n   * @example Registering a notification listener using a React hook:\n   * ```jsx\n   * import React from 'react';\n   * import * as Notifications from 'expo-notifications';\n   *\n   * export default function App() {\n   *   React.useEffect(() => {\n   *     const subscription = Notifications.addNotificationReceivedListener(notification => {\n   *       console.log(notification);\n   *     });\n   *     return () => subscription.remove();\n   *   }, []);\n   *\n   *   return (\n   *     // Your app content\n   *   );\n   * }\n   * ```\n   * @header listen\n   */\n  function addNotificationReceivedListener(listener) {\n    return emitter.addListener(didReceiveNotificationEventName, notification => {\n      const mappedNotification = (0, _utilsMapNotificationResponse.mapNotification)(notification);\n      listener(mappedNotification);\n    });\n  }\n  /**\n   * Listeners registered by this method will be called whenever some notifications have been dropped by the server.\n   * Applicable only to Firebase Cloud Messaging which we use as a notifications service on Android. It corresponds to `onDeletedMessages()` callback.\n   * More information can be found in [Firebase docs](https://firebase.google.com/docs/cloud-messaging/android/receive#override-ondeletedmessages).\n   * @param listener A callback function.\n   * @return An [`EventSubscription`](#eventsubscription) object represents the subscription of the provided listener.\n   * @header listen\n   */\n  function addNotificationsDroppedListener(listener) {\n    return emitter.addListener(didDropNotificationsEventName, listener);\n  }\n  /**\n   * Listeners registered by this method will be called whenever a user interacts with a notification (for example, taps on it).\n   * @param listener A function accepting notification response ([`NotificationResponse`](#notificationresponse)) as an argument.\n   * @return An [`EventSubscription`](#eventsubscription) object represents the subscription of the provided listener.\n   * @example Register a notification responder listener:\n   * ```jsx\n   * import React from 'react';\n   * import { Linking } from 'react-native';\n   * import * as Notifications from 'expo-notifications';\n   *\n   * export default function Container() {\n   *   React.useEffect(() => {\n   *     const subscription = Notifications.addNotificationResponseReceivedListener(response => {\n   *       const url = response.notification.request.content.data.url;\n   *       Linking.openURL(url);\n   *     });\n   *     return () => subscription.remove();\n   *   }, []);\n   *\n   *   return (\n   *     // Your app content\n   *   );\n   * }\n   * ```\n   * @header listen\n   */\n  function addNotificationResponseReceivedListener(listener) {\n    return emitter.addListener(didReceiveNotificationResponseEventName, response => {\n      const mappedResponse = (0, _utilsMapNotificationResponse.mapNotificationResponse)(response);\n      listener(mappedResponse);\n    });\n  }\n  /**\n   *\n   * Gets the notification response received most recently\n   * (a notification response designates an interaction with a notification, such as tapping on it).\n   *\n   * - `null` - if no notification response has been received yet\n   * - a [`NotificationResponse`](#notificationresponse) object - if a notification response was received\n   *\n   * @deprecated Use `getLastNotificationResponse` instead.\n   */\n  async function getLastNotificationResponseAsync() {\n    return getLastNotificationResponse();\n  }\n  /**\n   * Gets the notification response that was received most recently\n   * (a notification response designates an interaction with a notification, such as tapping on it).\n   *\n   * - `null` - if no notification response has been received yet\n   * - a [`NotificationResponse`](#notificationresponse) object - if a notification response was received\n   */\n  function getLastNotificationResponse() {\n    if (!NotificationsEmitterModule.default.getLastNotificationResponse) {\n      throw new _expoModulesCore.UnavailabilityError('ExpoNotifications', 'getLastNotificationResponse');\n    }\n    const response = NotificationsEmitterModule.default.getLastNotificationResponse();\n    const mappedResponse = response ? (0, _utilsMapNotificationResponse.mapNotificationResponse)(response) : response;\n    return mappedResponse;\n  }\n  /**\n   * Clears the notification response that was received most recently. May be used\n   * when an app selects a route based on the notification response, and it is undesirable\n   * to continue selecting the route after the response has already been handled.\n   *\n   * If a component is using the [`useLastNotificationResponse`](#uselastnotificationresponse) hook,\n   * this call will also clear the value returned by the hook.\n   *\n   * @deprecated Use `clearLastNotificationResponse` instead.\n   * @return A promise that resolves if the native call was successful.\n   */\n  async function clearLastNotificationResponseAsync() {\n    clearLastNotificationResponse();\n  }\n  /**\n   * Clears the notification response that was received most recently. May be used\n   * when an app selects a route based on the notification response, and it is undesirable\n   * to continue selecting the route after the response has already been handled.\n   *\n   * If a component is using the [`useLastNotificationResponse`](#uselastnotificationresponse) hook,\n   * this call will also clear the value returned by the hook.\n   *\n   */\n  function clearLastNotificationResponse() {\n    if (!NotificationsEmitterModule.default.clearLastNotificationResponse) {\n      throw new _expoModulesCore.UnavailabilityError('ExpoNotifications', 'clearLastNotificationResponse');\n    }\n    NotificationsEmitterModule.default.clearLastNotificationResponse();\n    // Emit event to clear any useLastNotificationResponse hooks, after native call succeeds\n    emitter.emit(didClearNotificationResponseEventName, []);\n  }\n  /**\n   * @hidden\n   */\n  function addNotificationResponseClearedListener(listener) {\n    return emitter.addListener(didClearNotificationResponseEventName, listener);\n  }\n});","lineCount":176,"map":[[12,2,11,0,"Object"],[12,8,11,0],[12,9,11,0,"defineProperty"],[12,23,11,0],[12,24,11,0,"exports"],[12,31,11,0],[13,4,11,0,"enumerable"],[13,14,11,0],[14,4,11,0,"get"],[14,7,11,0],[14,18,11,0,"get"],[14,19,11,0],[15,6,11,0],[15,13,11,0,"DEFAULT_ACTION_IDENTIFIER"],[15,38,11,0],[16,4,11,0],[17,2,11,0],[18,2,36,0,"exports"],[18,9,36,0],[18,10,36,0,"addNotificationReceivedListener"],[18,41,36,0],[18,44,36,0,"addNotificationReceivedListener"],[18,75,36,0],[19,2,50,0,"exports"],[19,9,50,0],[19,10,50,0,"addNotificationsDroppedListener"],[19,41,50,0],[19,44,50,0,"addNotificationsDroppedListener"],[19,75,50,0],[20,2,79,0,"exports"],[20,9,79,0],[20,10,79,0,"addNotificationResponseReceivedListener"],[20,49,79,0],[20,52,79,0,"addNotificationResponseReceivedListener"],[20,91,79,0],[21,2,95,0,"exports"],[21,9,95,0],[21,10,95,0,"getLastNotificationResponseAsync"],[21,42,95,0],[21,45,95,0,"getLastNotificationResponseAsync"],[21,77,95,0],[22,2,105,0,"exports"],[22,9,105,0],[22,10,105,0,"getLastNotificationResponse"],[22,37,105,0],[22,40,105,0,"getLastNotificationResponse"],[22,67,105,0],[23,2,124,0,"exports"],[23,9,124,0],[23,10,124,0,"clearLastNotificationResponseAsync"],[23,44,124,0],[23,47,124,0,"clearLastNotificationResponseAsync"],[23,81,124,0],[24,2,136,0,"exports"],[24,9,136,0],[24,10,136,0,"clearLastNotificationResponse"],[24,39,136,0],[24,42,136,0,"clearLastNotificationResponse"],[24,71,136,0],[25,2,147,0,"exports"],[25,9,147,0],[25,10,147,0,"addNotificationResponseClearedListener"],[25,48,147,0],[25,51,147,0,"addNotificationResponseClearedListener"],[25,89,147,0],[26,2,1,0],[26,6,1,0,"_expoModulesCore"],[26,22,1,0],[26,25,1,0,"require"],[26,32,1,0],[26,33,1,0,"_dependencyMap"],[26,47,1,0],[27,2,2,0],[27,6,2,0,"_NotificationsEmitterModule"],[27,33,2,0],[27,36,2,0,"require"],[27,43,2,0],[27,44,2,0,"_dependencyMap"],[27,58,2,0],[28,2,2,0],[28,6,2,0,"NotificationsEmitterModule"],[28,32,2,0],[28,35,2,0,"_interopDefault"],[28,50,2,0],[28,51,2,0,"_NotificationsEmitterModule"],[28,78,2,0],[29,2,3,0],[29,6,3,0,"_utilsMapNotificationResponse"],[29,35,3,0],[29,38,3,0,"require"],[29,45,3,0],[29,46,3,0,"_dependencyMap"],[29,60,3,0],[30,2,4,0],[31,2,5,0],[31,8,5,6,"emitter"],[31,15,5,13],[31,18,5,16],[31,22,5,20,"LegacyEventEmitter"],[31,38,5,38],[31,39,5,38,"LegacyEventEmitter"],[31,57,5,38],[31,58,5,39,"NotificationsEmitterModule"],[31,84,5,65],[31,85,5,65,"default"],[31,92,5,65],[31,93,5,66],[32,2,6,0],[32,8,6,6,"didReceiveNotificationEventName"],[32,39,6,37],[32,42,6,40],[32,68,6,66],[33,2,7,0],[33,8,7,6,"didDropNotificationsEventName"],[33,37,7,35],[33,40,7,38],[33,64,7,62],[34,2,8,0],[34,8,8,6,"didReceiveNotificationResponseEventName"],[34,47,8,45],[34,50,8,48],[34,84,8,82],[35,2,9,0],[35,8,9,6,"didClearNotificationResponseEventName"],[35,45,9,43],[35,48,9,46],[35,80,9,78],[36,2,10,0],[37,2,11,7],[37,8,11,13,"DEFAULT_ACTION_IDENTIFIER"],[37,33,11,38],[37,36,11,41],[37,80,11,85],[38,2,12,0],[39,0,13,0],[40,0,14,0],[41,0,15,0],[42,0,16,0],[43,0,17,0],[44,0,18,0],[45,0,19,0],[46,0,20,0],[47,0,21,0],[48,0,22,0],[49,0,23,0],[50,0,24,0],[51,0,25,0],[52,0,26,0],[53,0,27,0],[54,0,28,0],[55,0,29,0],[56,0,30,0],[57,0,31,0],[58,0,32,0],[59,0,33,0],[60,0,34,0],[61,0,35,0],[62,2,36,7],[62,11,36,16,"addNotificationReceivedListener"],[62,42,36,47,"addNotificationReceivedListener"],[62,43,36,48,"listener"],[62,51,36,56],[62,53,36,58],[63,4,37,4],[63,11,37,11,"emitter"],[63,18,37,18],[63,19,37,19,"addListener"],[63,30,37,30],[63,31,37,31,"didReceiveNotificationEventName"],[63,62,37,62],[63,64,37,65,"notification"],[63,76,37,77],[63,80,37,82],[64,6,38,8],[64,12,38,14,"mappedNotification"],[64,30,38,32],[64,33,38,35],[64,37,38,35,"mapNotification"],[64,66,38,50],[64,67,38,50,"mapNotification"],[64,82,38,50],[64,84,38,51,"notification"],[64,96,38,63],[64,97,38,64],[65,6,39,8,"listener"],[65,14,39,16],[65,15,39,17,"mappedNotification"],[65,33,39,35],[65,34,39,36],[66,4,40,4],[66,5,40,5],[66,6,40,6],[67,2,41,0],[68,2,42,0],[69,0,43,0],[70,0,44,0],[71,0,45,0],[72,0,46,0],[73,0,47,0],[74,0,48,0],[75,0,49,0],[76,2,50,7],[76,11,50,16,"addNotificationsDroppedListener"],[76,42,50,47,"addNotificationsDroppedListener"],[76,43,50,48,"listener"],[76,51,50,56],[76,53,50,58],[77,4,51,4],[77,11,51,11,"emitter"],[77,18,51,18],[77,19,51,19,"addListener"],[77,30,51,30],[77,31,51,31,"didDropNotificationsEventName"],[77,60,51,60],[77,62,51,62,"listener"],[77,70,51,70],[77,71,51,71],[78,2,52,0],[79,2,53,0],[80,0,54,0],[81,0,55,0],[82,0,56,0],[83,0,57,0],[84,0,58,0],[85,0,59,0],[86,0,60,0],[87,0,61,0],[88,0,62,0],[89,0,63,0],[90,0,64,0],[91,0,65,0],[92,0,66,0],[93,0,67,0],[94,0,68,0],[95,0,69,0],[96,0,70,0],[97,0,71,0],[98,0,72,0],[99,0,73,0],[100,0,74,0],[101,0,75,0],[102,0,76,0],[103,0,77,0],[104,0,78,0],[105,2,79,7],[105,11,79,16,"addNotificationResponseReceivedListener"],[105,50,79,55,"addNotificationResponseReceivedListener"],[105,51,79,56,"listener"],[105,59,79,64],[105,61,79,66],[106,4,80,4],[106,11,80,11,"emitter"],[106,18,80,18],[106,19,80,19,"addListener"],[106,30,80,30],[106,31,80,31,"didReceiveNotificationResponseEventName"],[106,70,80,70],[106,72,80,73,"response"],[106,80,80,81],[106,84,80,86],[107,6,81,8],[107,12,81,14,"mappedResponse"],[107,26,81,28],[107,29,81,31],[107,33,81,31,"mapNotificationResponse"],[107,62,81,54],[107,63,81,54,"mapNotificationResponse"],[107,86,81,54],[107,88,81,55,"response"],[107,96,81,63],[107,97,81,64],[108,6,82,8,"listener"],[108,14,82,16],[108,15,82,17,"mappedResponse"],[108,29,82,31],[108,30,82,32],[109,4,83,4],[109,5,83,5],[109,6,83,6],[110,2,84,0],[111,2,85,0],[112,0,86,0],[113,0,87,0],[114,0,88,0],[115,0,89,0],[116,0,90,0],[117,0,91,0],[118,0,92,0],[119,0,93,0],[120,0,94,0],[121,2,95,7],[121,17,95,22,"getLastNotificationResponseAsync"],[121,49,95,54,"getLastNotificationResponseAsync"],[121,50,95,54],[121,52,95,57],[122,4,96,4],[122,11,96,11,"getLastNotificationResponse"],[122,38,96,38],[122,39,96,39],[122,40,96,40],[123,2,97,0],[124,2,98,0],[125,0,99,0],[126,0,100,0],[127,0,101,0],[128,0,102,0],[129,0,103,0],[130,0,104,0],[131,2,105,7],[131,11,105,16,"getLastNotificationResponse"],[131,38,105,43,"getLastNotificationResponse"],[131,39,105,43],[131,41,105,46],[132,4,106,4],[132,8,106,8],[132,9,106,9,"NotificationsEmitterModule"],[132,35,106,35],[132,36,106,35,"default"],[132,43,106,35],[132,44,106,36,"getLastNotificationResponse"],[132,71,106,63],[132,73,106,65],[133,6,107,8],[133,12,107,14],[133,16,107,18,"UnavailabilityError"],[133,32,107,37],[133,33,107,37,"UnavailabilityError"],[133,52,107,37],[133,53,107,38],[133,72,107,57],[133,74,107,59],[133,103,107,88],[133,104,107,89],[134,4,108,4],[135,4,109,4],[135,10,109,10,"response"],[135,18,109,18],[135,21,109,21,"NotificationsEmitterModule"],[135,47,109,47],[135,48,109,47,"default"],[135,55,109,47],[135,56,109,48,"getLastNotificationResponse"],[135,83,109,75],[135,84,109,76],[135,85,109,77],[136,4,110,4],[136,10,110,10,"mappedResponse"],[136,24,110,24],[136,27,110,27,"response"],[136,35,110,35],[136,38,110,38],[136,42,110,38,"mapNotificationResponse"],[136,71,110,61],[136,72,110,61,"mapNotificationResponse"],[136,95,110,61],[136,97,110,62,"response"],[136,105,110,70],[136,106,110,71],[136,109,110,74,"response"],[136,117,110,82],[137,4,111,4],[137,11,111,11,"mappedResponse"],[137,25,111,25],[138,2,112,0],[139,2,113,0],[140,0,114,0],[141,0,115,0],[142,0,116,0],[143,0,117,0],[144,0,118,0],[145,0,119,0],[146,0,120,0],[147,0,121,0],[148,0,122,0],[149,0,123,0],[150,2,124,7],[150,17,124,22,"clearLastNotificationResponseAsync"],[150,51,124,56,"clearLastNotificationResponseAsync"],[150,52,124,56],[150,54,124,59],[151,4,125,4,"clearLastNotificationResponse"],[151,33,125,33],[151,34,125,34],[151,35,125,35],[152,2,126,0],[153,2,127,0],[154,0,128,0],[155,0,129,0],[156,0,130,0],[157,0,131,0],[158,0,132,0],[159,0,133,0],[160,0,134,0],[161,0,135,0],[162,2,136,7],[162,11,136,16,"clearLastNotificationResponse"],[162,40,136,45,"clearLastNotificationResponse"],[162,41,136,45],[162,43,136,48],[163,4,137,4],[163,8,137,8],[163,9,137,9,"NotificationsEmitterModule"],[163,35,137,35],[163,36,137,35,"default"],[163,43,137,35],[163,44,137,36,"clearLastNotificationResponse"],[163,73,137,65],[163,75,137,67],[164,6,138,8],[164,12,138,14],[164,16,138,18,"UnavailabilityError"],[164,32,138,37],[164,33,138,37,"UnavailabilityError"],[164,52,138,37],[164,53,138,38],[164,72,138,57],[164,74,138,59],[164,105,138,90],[164,106,138,91],[165,4,139,4],[166,4,140,4,"NotificationsEmitterModule"],[166,30,140,30],[166,31,140,30,"default"],[166,38,140,30],[166,39,140,31,"clearLastNotificationResponse"],[166,68,140,60],[166,69,140,61],[166,70,140,62],[167,4,141,4],[168,4,142,4,"emitter"],[168,11,142,11],[168,12,142,12,"emit"],[168,16,142,16],[168,17,142,17,"didClearNotificationResponseEventName"],[168,54,142,54],[168,56,142,56],[168,58,142,58],[168,59,142,59],[169,2,143,0],[170,2,144,0],[171,0,145,0],[172,0,146,0],[173,2,147,7],[173,11,147,16,"addNotificationResponseClearedListener"],[173,49,147,54,"addNotificationResponseClearedListener"],[173,50,147,55,"listener"],[173,58,147,63],[173,60,147,65],[174,4,148,4],[174,11,148,11,"emitter"],[174,18,148,18],[174,19,148,19,"addListener"],[174,30,148,30],[174,31,148,31,"didClearNotificationResponseEventName"],[174,68,148,68],[174,70,148,70,"listener"],[174,78,148,78],[174,79,148,79],[175,2,149,0],[176,0,149,1],[176,3]],"functionMap":{"names":["<global>","addNotificationReceivedListener","emitter.addListener$argument_1","addNotificationsDroppedListener","addNotificationResponseReceivedListener","getLastNotificationResponseAsync","getLastNotificationResponse","clearLastNotificationResponseAsync","clearLastNotificationResponse","addNotificationResponseClearedListener"],"mappings":"AAA;OCmC;gECC;KDG;CDC;OGS;CHE;OI2B;wEFC;KEG;CJC;OKW;CLE;OMQ;CNO;OOY;CPE;OQU;CRO;OSI;CTE"},"hasCjsExports":false},"type":"js/module"}]}